{
  "version": 3,
  "sources": ["../../../index.js", "../../../../../../.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-Y6jVgK/middleware-insertion-facade.js", "../../../../../../.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts", "../bundle-Y6jVgK/middleware-loader.entry.ts"],
  "sourceRoot": "/home/runner/work/claudecode-via-openrouter/claudecode-via-openrouter/.wrangler/tmp/dev-bU95hR",
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// formatRequest.ts\nfunction validateOpenAIToolCalls(messages) {\n  const validatedMessages = [];\n  for (let i = 0; i < messages.length; i++) {\n    const currentMessage = { ...messages[i] };\n    if (currentMessage.role === \"assistant\" && currentMessage.tool_calls) {\n      const validToolCalls = [];\n      const immediateToolMessages = [];\n      let j = i + 1;\n      while (j < messages.length && messages[j].role === \"tool\") {\n        immediateToolMessages.push(messages[j]);\n        j++;\n      }\n      currentMessage.tool_calls.forEach((toolCall) => {\n        const hasImmediateToolMessage = immediateToolMessages.some(\n          (toolMsg) => toolMsg.tool_call_id === toolCall.id\n        );\n        if (hasImmediateToolMessage) {\n          validToolCalls.push(toolCall);\n        }\n      });\n      if (validToolCalls.length > 0) {\n        currentMessage.tool_calls = validToolCalls;\n      } else {\n        delete currentMessage.tool_calls;\n      }\n      if (currentMessage.content || currentMessage.tool_calls) {\n        validatedMessages.push(currentMessage);\n      }\n    } else if (currentMessage.role === \"tool\") {\n      let hasImmediateToolCall = false;\n      if (i > 0) {\n        const prevMessage = messages[i - 1];\n        if (prevMessage.role === \"assistant\" && prevMessage.tool_calls) {\n          hasImmediateToolCall = prevMessage.tool_calls.some(\n            (toolCall) => toolCall.id === currentMessage.tool_call_id\n          );\n        } else if (prevMessage.role === \"tool\") {\n          for (let k = i - 1; k >= 0; k--) {\n            if (messages[k].role === \"tool\") continue;\n            if (messages[k].role === \"assistant\" && messages[k].tool_calls) {\n              hasImmediateToolCall = messages[k].tool_calls.some(\n                (toolCall) => toolCall.id === currentMessage.tool_call_id\n              );\n            }\n            break;\n          }\n        }\n      }\n      if (hasImmediateToolCall) {\n        validatedMessages.push(currentMessage);\n      }\n    } else {\n      validatedMessages.push(currentMessage);\n    }\n  }\n  return validatedMessages;\n}\n__name(validateOpenAIToolCalls, \"validateOpenAIToolCalls\");\n\nfunction mapModel(anthropicModel) {\n  if (anthropicModel.includes(\"/\")) {\n    return anthropicModel;\n  }\n  if (anthropicModel.includes(\"haiku\")) {\n    return \"anthropic/claude-3.5-haiku\";\n  } else if (anthropicModel.includes(\"sonnet\")) {\n    return \"anthropic/claude-sonnet-4\";\n  } else if (anthropicModel.includes(\"opus\")) {\n    return \"anthropic/claude-opus-4\";\n  }\n  return anthropicModel;\n}\n__name(mapModel, \"mapModel\");\n\nfunction formatAnthropicToOpenAI(body) {\n  const { model, messages, system = [], temperature, tools, stream } = body;\n  const openAIMessages = Array.isArray(messages) ? messages.flatMap((anthropicMessage) => {\n    const openAiMessagesFromThisAnthropicMessage = [];\n    if (!Array.isArray(anthropicMessage.content)) {\n      if (typeof anthropicMessage.content === \"string\") {\n        openAiMessagesFromThisAnthropicMessage.push({\n          role: anthropicMessage.role,\n          content: anthropicMessage.content\n        });\n      }\n      return openAiMessagesFromThisAnthropicMessage;\n    }\n    if (anthropicMessage.role === \"assistant\") {\n      const assistantMessage = { role: \"assistant\", content: null };\n      let textContent = \"\";\n      const toolCalls = [];\n      anthropicMessage.content.forEach((contentPart) => {\n        if (contentPart.type === \"text\") {\n          textContent += (typeof contentPart.text === \"string\" ? contentPart.text : JSON.stringify(contentPart.text)) + \"\\n\";\n        } else if (contentPart.type === \"tool_use\") {\n          toolCalls.push({\n            id: contentPart.id,\n            type: \"function\",\n            function: {\n              name: contentPart.name,\n              arguments: JSON.stringify(contentPart.input)\n            }\n          });\n        }\n      });\n      const trimmedTextContent = textContent.trim();\n      if (trimmedTextContent.length > 0) {\n        assistantMessage.content = trimmedTextContent;\n      }\n      if (toolCalls.length > 0) {\n        assistantMessage.tool_calls = toolCalls;\n      }\n      if (assistantMessage.content || assistantMessage.tool_calls && assistantMessage.tool_calls.length > 0) {\n        openAiMessagesFromThisAnthropicMessage.push(assistantMessage);\n      }\n    } else if (anthropicMessage.role === \"user\") {\n      let userTextMessageContent = \"\";\n      const subsequentToolMessages = [];\n      anthropicMessage.content.forEach((contentPart) => {\n        if (contentPart.type === \"text\") {\n          userTextMessageContent += (typeof contentPart.text === \"string\" ? contentPart.text : JSON.stringify(contentPart.text)) + \"\\n\";\n        } else if (contentPart.type === \"tool_result\") {\n          subsequentToolMessages.push({\n            role: \"tool\",\n            tool_call_id: contentPart.tool_use_id,\n            content: typeof contentPart.content === \"string\" ? contentPart.content : JSON.stringify(contentPart.content)\n          });\n        }\n      });\n      const trimmedUserText = userTextMessageContent.trim();\n      if (trimmedUserText.length > 0) {\n        openAiMessagesFromThisAnthropicMessage.push({\n          role: \"user\",\n          content: trimmedUserText\n        });\n      }\n      openAiMessagesFromThisAnthropicMessage.push(...subsequentToolMessages);\n    }\n    return openAiMessagesFromThisAnthropicMessage;\n  }) : [];\n  const systemMessages = Array.isArray(system) ? system.map((item) => {\n    const content = { type: \"text\", text: item.text };\n    if (model.includes(\"claude\")) {\n      content.cache_control = { \"type\": \"ephemeral\" };\n    }\n    return { role: \"system\", content: [content] };\n  }) : [{\n    role: \"system\",\n    content: [{\n      type: \"text\",\n      text: system,\n      ...model.includes(\"claude\") ? { cache_control: { \"type\": \"ephemeral\" } } : {}\n    }]\n  }];\n  const data = {\n    model: mapModel(model),\n    messages: [...systemMessages, ...openAIMessages],\n    temperature,\n    stream\n  };\n  if (tools) {\n    data.tools = tools.map((item) => ({\n      type: \"function\",\n      function: {\n        name: item.name,\n        description: item.description,\n        parameters: item.input_schema\n      }\n    }));\n  }\n  data.messages = [...systemMessages, ...validateOpenAIToolCalls(openAIMessages)];\n  return data;\n}\n__name(formatAnthropicToOpenAI, \"formatAnthropicToOpenAI\");\n\n// streamResponse.ts\nfunction streamOpenAIToAnthropic(openaiStream, model) {\n  const messageId = \"msg_\" + Date.now().toString(36) + Math.random().toString(36).substr(2);\n  const generateNonce = () => Math.random().toString(36).substr(2);\n  const enqueueSSE = /* @__PURE__ */ __name((controller, eventType, data) => {\n    const sseMessage = `event: ${eventType}\\ndata: ${JSON.stringify(data)}\\n\\n`;\n    controller.enqueue(new TextEncoder().encode(sseMessage));\n  }, \"enqueueSSE\");\n\n  return new ReadableStream({\n    async start(controller) {\n      let contentBlockIndex = 0;\n      let hasStartedTextBlock = false;\n      let isToolUse = false;\n      let currentToolCallId = null;\n      let toolCallJsonMap = /* @__PURE__ */ new Map();\n      let currentUsage = {\n        input_tokens: 0,\n        cache_creation_input_tokens: 0,\n        cache_read_input_tokens: 0,\n        output_tokens: 1,\n        service_tier: \"standard\"\n      };\n\n      const messageStart = {\n        nonce: generateNonce(),\n        type: \"message_start\",\n        message: {\n          id: messageId,\n          type: \"message\",\n          role: \"assistant\",\n          model,\n          content: [],\n          stop_reason: null,\n          stop_sequence: null,\n          usage: { ...currentUsage }\n        }\n      };\n      enqueueSSE(controller, \"message_start\", messageStart);\n\n      const reader = openaiStream.getReader();\n      const decoder = new TextDecoder();\n      let buffer = \"\";\n      let outputTokenCount = 0;\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            if (buffer.trim()) {\n              const lines2 = buffer.split(\"\\n\");\n              for (const line of lines2) {\n                if (line.trim() && line.startsWith(\"data: \")) {\n                  const data = line.slice(6).trim();\n                  if (data === \"[DONE]\") continue;\n                  try {\n                    const parsed = JSON.parse(data);\n                    processStreamChunk(parsed);\n                  } catch (e) {}\n                }\n              }\n            }\n            break;\n          }\n          const chunk = decoder.decode(value, { stream: true });\n          buffer += chunk;\n          const lines = buffer.split(\"\\n\");\n          buffer = lines.pop() || \"\";\n          for (const line of lines) {\n            if (line.trim() && line.startsWith(\"data: \")) {\n              const data = line.slice(6).trim();\n              if (data === \"[DONE]\") continue;\n              try {\n                const parsed = JSON.parse(data);\n                processStreamChunk(parsed);\n              } catch (e) {\n                continue;\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      function processStreamChunk(parsed) {\n        const delta = parsed.choices?.[0]?.delta;\n        if (parsed.usage) {\n          currentUsage.input_tokens = parsed.usage.prompt_tokens || currentUsage.input_tokens;\n          currentUsage.output_tokens = parsed.usage.completion_tokens || currentUsage.output_tokens;\n        }\n        if (!delta) return;\n\n        if (Math.random() < 0.1) {\n          enqueueSSE(controller, \"ping\", {\n            nonce: generateNonce(),\n            type: \"ping\"\n          });\n        }\n\n        if (delta.tool_calls?.length > 0) {\n          for (const toolCall of delta.tool_calls) {\n            const toolCallId = toolCall.id;\n            if (toolCallId && toolCallId !== currentToolCallId) {\n              if (isToolUse || hasStartedTextBlock) {\n                enqueueSSE(controller, \"content_block_stop\", {\n                  type: \"content_block_stop\",\n                  index: contentBlockIndex\n                });\n              }\n              isToolUse = true;\n              hasStartedTextBlock = false;\n              currentToolCallId = toolCallId;\n              contentBlockIndex++;\n              toolCallJsonMap.set(toolCallId, \"\");\n              const toolBlock = {\n                type: \"tool_use\",\n                id: toolCallId,\n                name: toolCall.function?.name,\n                input: {}\n              };\n              enqueueSSE(controller, \"content_block_start\", {\n                nonce: generateNonce(),\n                type: \"content_block_start\",\n                index: contentBlockIndex,\n                content_block: toolBlock\n              });\n            }\n            if (toolCall.function?.arguments && currentToolCallId) {\n              const currentJson = toolCallJsonMap.get(currentToolCallId) || \"\";\n              toolCallJsonMap.set(currentToolCallId, currentJson + toolCall.function.arguments);\n              enqueueSSE(controller, \"content_block_delta\", {\n                nonce: generateNonce(),\n                type: \"content_block_delta\",\n                index: contentBlockIndex,\n                delta: {\n                  type: \"input_json_delta\",\n                  partial_json: toolCall.function.arguments\n                }\n              });\n            }\n          }\n        } else if (delta.content) {\n          outputTokenCount += Math.ceil(delta.content.length / 4);\n          if (isToolUse) {\n            enqueueSSE(controller, \"content_block_stop\", {\n              type: \"content_block_stop\",\n              index: contentBlockIndex\n            });\n            isToolUse = false;\n            currentToolCallId = null;\n            contentBlockIndex++;\n          }\n          if (!hasStartedTextBlock) {\n            enqueueSSE(controller, \"content_block_start\", {\n              nonce: generateNonce(),\n              type: \"content_block_start\",\n              index: contentBlockIndex,\n              content_block: { type: \"text\", text: \"\" }\n            });\n            hasStartedTextBlock = true;\n          }\n\n          const eventData = {\n            type: \"content_block_delta\",\n            index: contentBlockIndex,\n            delta: { type: \"text_delta\", text: delta.content }\n          };\n          if (Math.random() < 0.5) {\n            eventData.nonce = generateNonce();\n          }\n          enqueueSSE(controller, \"content_block_delta\", eventData);\n        }\n      }\n      __name(processStreamChunk, \"processStreamChunk\");\n      \n      if (isToolUse || hasStartedTextBlock) {\n        enqueueSSE(controller, \"content_block_stop\", {\n          type: \"content_block_stop\",\n          index: contentBlockIndex\n        });\n      }\n\n      const finalOutputTokens = currentUsage.output_tokens || outputTokenCount || 1;\n      enqueueSSE(controller, \"message_delta\", {\n        nonce: generateNonce(),\n        type: \"message_delta\",\n        delta: {\n          stop_reason: isToolUse ? \"tool_use\" : \"end_turn\",\n          stop_sequence: null\n        },\n        usage: { output_tokens: finalOutputTokens }\n      });\n\n      enqueueSSE(controller, \"message_stop\", {\n        nonce: generateNonce(),\n        type: \"message_stop\"\n      });\n\n      controller.close();\n    }\n  });\n}\n__name(streamOpenAIToAnthropic, \"streamOpenAIToAnthropic\");\n\n// formatResponse.ts\nfunction formatOpenAIToAnthropic(completion, model) {\n  const messageId = \"msg_\" + Date.now().toString(36) + Math.random().toString(36).substr(2);\n  let content = [];\n  \n  if (completion.choices[0].message.content) {\n    content = [{ text: completion.choices[0].message.content, type: \"text\" }];\n  } else if (completion.choices[0].message.tool_calls) {\n    content = completion.choices[0].message.tool_calls.map((item) => {\n      return {\n        type: \"tool_use\",\n        id: item.id,\n        name: item.function?.name,\n        input: item.function?.arguments ? JSON.parse(item.function.arguments) : {}\n      };\n    });\n  }\n\n  const usage = completion.usage ? {\n    input_tokens: completion.usage.prompt_tokens || 0,\n    cache_creation_input_tokens: 0,\n    cache_read_input_tokens: 0,\n    output_tokens: completion.usage.completion_tokens || 0,\n    service_tier: \"standard\"\n  } : {\n    input_tokens: 0,\n    cache_creation_input_tokens: 0,\n    cache_read_input_tokens: 0,\n    output_tokens: 0,\n    service_tier: \"standard\"\n  };\n\n  const result = {\n    id: messageId,\n    type: \"message\",\n    role: \"assistant\",\n    model,\n    content,\n    stop_reason: completion.choices[0].finish_reason === \"tool_calls\" ? \"tool_use\" : \"end_turn\",\n    stop_sequence: null,\n    usage\n  };\n  \n  return result;\n}\n__name(formatOpenAIToAnthropic, \"formatOpenAIToAnthropic\");\n\n// Simple HTML pages\nvar indexHtml = `<!DOCTYPE html>\n<html><head><meta charset=\"UTF-8\"><title>Claude Code + OpenRouter</title>\n<style>body{font-family:monospace;max-width:800px;margin:20px auto;background:#000;color:#0f0;padding:20px}\n.header{border-bottom:1px solid #0f0;padding-bottom:10px;margin-bottom:20px}\n.step{margin:20px 0;padding:10px;border:1px solid #333}\n.code{background:#111;color:#0f0;padding:10px;margin:10px 0;border:1px solid #333;overflow-x:auto}\n.btn{background:#333;color:#0f0;border:1px solid #0f0;padding:5px 10px;cursor:pointer}\n.btn:hover{background:#0f0;color:#000}\na{color:#0f0}a:visited{color:#090}</style></head>\n<body><div class=\"header\"><h1>\uD83D\uDE80 Claude Code + OpenRouter</h1><p>Terminal-style setup guide</p></div>\n\n<div class=\"step\"><h2>\u26A1 One-line Install (Recommended)</h2>\n<div class=\"code\">bash -c \"$(curl -fsSL https://cc.yovy.app/install.sh)\"</div>\n<button class=\"btn\" onclick=\"copy('bash -c \\\"$(curl -fsSL https://cc.yovy.app/install.sh)\\\"')\">Copy</button>\n<p>Installs Node.js, Claude Code, and configures environment</p></div>\n\n<div class=\"step\"><h2>1. Manual: Install Claude Code</h2>\n<div class=\"code\">npm install -g @anthropic-ai/claude-code</div>\n<button class=\"btn\" onclick=\"copy('npm install -g @anthropic-ai/claude-code')\">Copy</button>\n<p>Or download from <a href=\"https://claude.ai/code\">claude.ai/code</a></p></div>\n\n<div class=\"step\"><h2>2. Manual: Get OpenRouter API Key</h2>\n<p>Sign up at <a href=\"https://openrouter.ai\">openrouter.ai</a> and get your API key</p></div>\n\n<div class=\"step\"><h2>3. Manual: Configure</h2>\n<p>Add to ~/.bashrc or ~/.zshrc:</p>\n<div class=\"code\">export ANTHROPIC_BASE_URL=\"https://cc.yovy.app\"\nexport ANTHROPIC_API_KEY=\"your-openrouter-api-key\"</div>\n<button class=\"btn\" onclick=\"copy('export ANTHROPIC_BASE_URL=\\\"https://cc.yovy.app\\\"\\\\nexport ANTHROPIC_API_KEY=\\\"your-openrouter-api-key\\\"')\">Copy</button>\n\n<p>Optional models (browse at <a href=\"https://openrouter.ai/models\">openrouter.ai/models</a>):</p>\n<div class=\"code\">export ANTHROPIC_MODEL=\"moonshotai/kimi-k2\"\nexport ANTHROPIC_SMALL_FAST_MODEL=\"google/gemini-2.5-flash\"</div>\n<button class=\"btn\" onclick=\"copy('export ANTHROPIC_MODEL=\\\"moonshotai/kimi-k2\\\"\\\\nexport ANTHROPIC_SMALL_FAST_MODEL=\\\"google/gemini-2.5-flash\\\"')\">Copy</button>\n\n<p>Reload shell:</p>\n<div class=\"code\">source ~/.bashrc</div>\n<button class=\"btn\" onclick=\"copy('source ~/.bashrc')\">Copy</button></div>\n\n<div class=\"step\"><h2>\uD83C\uDF89 Ready!</h2>\n<p>Run <code>claude</code> in terminal</p></div>\n\n<div class=\"step\"><p>Links: <a href=\"https://github.com/luohy15/y-router\">y-router</a> | \n<a href=\"https://openrouter.ai\">OpenRouter</a> | <a href=\"https://claude.ai/code\">Claude Code</a> | \n<a href=\"/terms\">Terms</a> | <a href=\"/privacy\">Privacy</a></p></div>\n\n<script>function copy(text){navigator.clipboard.writeText(text).then(()=>alert('Copied!')).catch(()=>{\nconst t=document.createElement('textarea');t.value=text;document.body.appendChild(t);t.select();\ndocument.execCommand('copy');document.body.removeChild(t);alert('Copied!')})}</script></body></html>`;\n\nvar termsHtml = `<!DOCTYPE html>\n<html><head><meta charset=\"UTF-8\"><title>Terms - y-router</title>\n<style>body{font-family:monospace;max-width:800px;margin:20px auto;background:#000;color:#0f0;padding:20px;line-height:1.4}\nh1,h2,h3{color:#0f0;margin:20px 0 10px 0}ul{margin-left:20px}a{color:#0f0}</style></head>\n<body><p><a href=\"/\">Home</a> | <a href=\"/terms\">Terms</a> | <a href=\"/privacy\">Privacy</a></p>\n\n<h1>Terms of Service</h1>\n<p>Last updated: July 12, 2025</p>\n\n<h2>Important</h2>\n<p>By using y-router (cc.yovy.app), you acknowledge this is a third-party service not affiliated with Anthropic, OpenAI, or OpenRouter. Use at your own risk.</p>\n\n<h2>1. Service Description</h2>\n<p>y-router converts requests between Anthropic's Claude API format and OpenAI-compatible formats. Acts as a proxy for API compatibility.</p>\n\n<h2>2. User Responsibilities</h2>\n<ul><li>Provide your own valid API keys</li>\n<li>Responsible for security and costs of your API keys</li>\n<li>Comply with all laws and connected API provider terms</li>\n<li>Not use for illegal, harmful, or malicious purposes</li></ul>\n\n<h2>3. Service Limitations</h2>\n<ul><li>Provided \"as is\" without warranties</li>\n<li>No guaranteed availability</li>\n<li>May modify, suspend, or discontinue anytime</li>\n<li>Rate limits may apply</li></ul>\n\n<h2>4. Data and Privacy</h2>\n<ul><li>Processes requests real-time, doesn't store user data</li>\n<li>Forwards to third-party providers per their policies</li>\n<li>Review connected service privacy policies</li></ul>\n\n<h2>5. Limitation of Liability</h2>\n<p>Not liable for damages including data loss, service interruptions, cost overruns, security breaches, or TOS violations.</p>\n\n<h2>6. Contact</h2>\n<p>Questions: <a href=\"https://github.com/luohy15/y-router\">GitHub repository</a></p>\n\n<p>y-router is independent, open-source. Not affiliated with Anthropic, OpenAI, or OpenRouter.</p></body></html>`;\n\nvar privacyHtml = `<!DOCTYPE html>\n<html><head><meta charset=\"UTF-8\"><title>Privacy - y-router</title>\n<style>body{font-family:monospace;max-width:800px;margin:20px auto;background:#000;color:#0f0;padding:20px;line-height:1.4}\nh1,h2,h3{color:#0f0;margin:20px 0 10px 0}ul{margin-left:20px}a{color:#0f0}</style></head>\n<body><p><a href=\"/\">Home</a> | <a href=\"/terms\">Terms</a> | <a href=\"/privacy\">Privacy</a></p>\n\n<h1>Privacy Policy</h1>\n<p>Last updated: July 12, 2025</p>\n\n<h2>Privacy First</h2>\n<p>y-router is a transparent proxy that doesn't store your data. Requests are processed by third-party providers with their own policies.</p>\n\n<h2>1. What We Process</h2>\n<ul><li>API requests/responses in transit</li>\n<li>Request metadata for operation</li>\n<li>Technical info for format conversion</li></ul>\n\n<h2>2. What We DON'T Store</h2>\n<ul><li>Your API keys</li>\n<li>Conversation content</li>\n<li>Personal info</li>\n<li>Request history beyond necessity</li></ul>\n\n<h2>3. Data Flow</h2>\n<p>Your App \u2192 y-router \u2192 API Provider \u2192 y-router \u2192 Your App<br>\ny-router acts as pass-through, doesn't retain data.</p>\n\n<h2>4. Third-Party Services</h2>\n<p>Data processed by API providers with own policies:</p>\n<ul><li>OpenRouter: <a href=\"https://openrouter.ai/privacy\">Privacy Policy</a></li>\n<li>Anthropic: <a href=\"https://www.anthropic.com/privacy\">Privacy Policy</a></li></ul>\n\n<h2>5. Technical</h2>\n<ul><li>Runs on Cloudflare Workers</li>\n<li>No persistent storage for user data</li>\n<li>Minimal operational logs</li>\n<li>HTTPS encryption</li></ul>\n\n<h2>6. Self-Hosting</h2>\n<p>For max privacy: deploy y-router yourself for full control</p>\n\n<h2>7. Contact</h2>\n<p>Privacy questions: <a href=\"https://github.com/luohy15/y-router/issues\">GitHub Issues</a></p>\n\n<p>y-router is independent, open-source. Data requests should go to relevant API providers.</p></body></html>`;\n\nvar installSh = `#!/bin/bash\nset -e\n\ninstall_nodejs() {\n    echo \"\uD83D\uDE80 Installing Node.js...\"\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash\n    \\\\. \"$HOME/.nvm/nvm.sh\"\n    nvm install 22\n    echo \"\u2705 Node.js: $(node -v), npm: $(npm -v)\"\n}\n\nif command -v node >/dev/null 2>&1; then\n    major_version=$(node -v | sed 's/v//' | cut -d. -f1)\n    if [ \"$major_version\" -ge 18 ]; then\n        echo \"Node.js already installed: $(node -v)\"\n    else\n        install_nodejs\n    fi\nelse\n    install_nodejs\nfi\n\nif command -v claude >/dev/null 2>&1; then\n    echo \"Claude Code already installed: $(claude --version)\"\nelse\n    echo \"Installing Claude Code...\"\n    npm install -g @anthropic-ai/claude-code\nfi\n\necho \"Configuring Claude Code...\"\nnode --eval 'const homeDir=os.homedir();const filePath=path.join(homeDir,\".claude.json\");\nif(fs.existsSync(filePath)){const content=JSON.parse(fs.readFileSync(filePath,\"utf-8\"));\nfs.writeFileSync(filePath,JSON.stringify({...content,hasCompletedOnboarding:true},2),\"utf-8\")}\nelse{fs.writeFileSync(filePath,JSON.stringify({hasCompletedOnboarding:true}),\"utf-8\")}'\n\necho \"\uD83D\uDD27 Select provider:\"\necho \"1) OpenRouter (default)\"\necho \"2) Moonshot\"\nread -p \"Choice [1]: \" provider_choice\nprovider_choice=\\${provider_choice:-1}\n\ncase \"$provider_choice\" in\n    1)\n        provider=\"openrouter\"\n        default_base_url=\"https://cc.yovy.app\"\n        api_key_url=\"https://openrouter.ai/keys\"\n        default_model_main=\"anthropic/claude-sonnet-4\"\n        default_model_small=\"anthropic/claude-3.5-haiku\"\n        ;;\n    2)\n        provider=\"moonshot\"\n        echo \"Moonshot endpoint:\"\n        echo \"1) Global (.ai)\"\n        echo \"2) China (.cn)\"\n        read -p \"Choice [1]: \" endpoint_choice\n        endpoint_choice=\\${endpoint_choice:-1}\n        \n        if [ \"$endpoint_choice\" = \"2\" ]; then\n            default_base_url=\"https://api.moonshot.cn/anthropic/\"\n            api_key_url=\"https://platform.moonshot.cn/console/api-keys\"\n        else\n            default_base_url=\"https://api.moonshot.ai/anthropic/\"\n            api_key_url=\"https://platform.moonshot.ai/console/api-keys\"\n        fi\n        \n        echo \"\u26A0\uFE0F  Important: Moonshot requires account credit before use\"\n        default_model_main=\"kimi-k2-0711-preview\"\n        default_model_small=\"moonshot-v1-8k\"\n        ;;\n    *)\n        echo \"Invalid choice. Exiting.\"\n        exit 1\n        ;;\nesac\n\nread -p \"Base URL [$default_base_url]: \" base_url\nbase_url=\\${base_url:-$default_base_url}\n\necho \"\uD83D\uDD11 Enter $provider API key (get from: $api_key_url):\"\nread -s api_key\necho \"\u2705 API key received (\\${#api_key} chars)\"\n\nif [ -z \"$api_key\" ]; then\n    echo \"\u274C API key required\"\n    exit 1\nfi\n\nread -p \"Main model [$default_model_main]: \" model_main\nmodel_main=\\${model_main:-$default_model_main}\n\nread -p \"Small model [$default_model_small]: \" model_small\nmodel_small=\\${model_small:-$default_model_small}\n\ncurrent_shell=$(basename \"$SHELL\")\ncase \"$current_shell\" in\n    bash) rc_file=\"$HOME/.bashrc\" ;;\n    zsh) rc_file=\"$HOME/.zshrc\" ;;\n    fish) rc_file=\"$HOME/.config/fish/config.fish\" ;;\n    *) rc_file=\"$HOME/.profile\" ;;\nesac\n\necho \"\uD83D\uDCDD Configuring $rc_file...\"\n\nif [ -f \"$rc_file\" ]; then\n    cp \"$rc_file\" \"\\${rc_file}.backup.$(date +%Y%m%d_%H%M%S)\"\n    grep -v \"^# Claude Code\\\\|^export ANTHROPIC_\" \"$rc_file\" > \"\\${rc_file}.tmp\" || true\n    mv \"\\${rc_file}.tmp\" \"$rc_file\"\nfi\n\ncat >> \"$rc_file\" << EOF\n\n# Claude Code environment variables for $provider\nexport ANTHROPIC_BASE_URL=$base_url\nexport ANTHROPIC_API_KEY=$api_key\nexport ANTHROPIC_MODEL=$model_main\nexport ANTHROPIC_SMALL_FAST_MODEL=$model_small\nEOF\n\necho \"\uD83C\uDF89 Installation completed!\"\necho \"\uD83D\uDD04 Restart terminal or run: source $rc_file\"\necho \"\uD83D\uDE80 Then run: claude\"`;\n\n// Helper function to build headers for OpenRouter requests\nfunction buildOpenRouterHeaders(bearerToken, env) {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": `Bearer ${bearerToken}`\n  };\n  \n  // Add HTTP-Referer header for application tracking\n  // Priority: 1) Environment variable 2) Default fallback\n  const appReferer = env.OPENROUTER_APP_REFERER || 'https://xline.askman.dev';\n  headers[\"HTTP-Referer\"] = appReferer;\n  \n  return headers;\n}\n__name(buildOpenRouterHeaders, \"buildOpenRouterHeaders\");\n\n// index.ts\nvar index_default = {\n  async fetch(request, env) {\n    const url = new URL(request.url);\n    if (url.pathname === \"/\" && request.method === \"GET\") {\n      return new Response(indexHtml, { headers: { \"Content-Type\": \"text/html\" } });\n    }\n    if (url.pathname === \"/terms\" && request.method === \"GET\") {\n      return new Response(termsHtml, { headers: { \"Content-Type\": \"text/html\" } });\n    }\n    if (url.pathname === \"/privacy\" && request.method === \"GET\") {\n      return new Response(privacyHtml, { headers: { \"Content-Type\": \"text/html\" } });\n    }\n    if (url.pathname === \"/install.sh\" && request.method === \"GET\") {\n      return new Response(installSh, { headers: { \"Content-Type\": \"text/plain; charset=utf-8\" } });\n    }\n    if (url.pathname === \"/v1/messages/count_tokens\" && request.method === \"POST\") {\n      const anthropicRequest = await request.json();\n      const openaiRequest = formatAnthropicToOpenAI(anthropicRequest);\n      const bearerToken = request.headers.get(\"x-api-key\");\n      const baseUrl = env.OPENROUTER_BASE_URL || \"https://openrouter.ai/api/v1\";\n      \n      // For token counting, we make a request with max_tokens=0 to get usage info without generation\n      const tokenCountRequest = {\n        ...openaiRequest,\n        max_tokens: 1,\n        stream: false\n      };\n      \n      const openaiResponse = await fetch(`${baseUrl}/chat/completions`, {\n        method: \"POST\",\n        headers: buildOpenRouterHeaders(bearerToken, env),\n        body: JSON.stringify(tokenCountRequest)\n      });\n      \n      if (!openaiResponse.ok) {\n        return new Response(await openaiResponse.text(), { status: openaiResponse.status });\n      }\n      \n      const openaiData = await openaiResponse.json();\n      \n      // Format response for Anthropic count_tokens API\n      const anthropicTokenResponse = {\n        input_tokens: openaiData.usage?.prompt_tokens || 0\n      };\n      \n      return new Response(JSON.stringify(anthropicTokenResponse), {\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n    }\n    if (url.pathname === \"/v1/messages\" && request.method === \"POST\") {\n      const anthropicRequest = await request.json();\n      const openaiRequest = formatAnthropicToOpenAI(anthropicRequest);\n      const bearerToken = request.headers.get(\"x-api-key\");\n      const baseUrl = env.OPENROUTER_BASE_URL || \"https://openrouter.ai/api/v1\";\n      const openaiResponse = await fetch(`${baseUrl}/chat/completions`, {\n        method: \"POST\",\n        headers: buildOpenRouterHeaders(bearerToken, env),\n        body: JSON.stringify(openaiRequest)\n      });\n      if (!openaiResponse.ok) {\n        return new Response(await openaiResponse.text(), { status: openaiResponse.status });\n      }\n      if (openaiRequest.stream) {\n        const anthropicStream = streamOpenAIToAnthropic(openaiResponse.body, openaiRequest.model);\n        return new Response(anthropicStream, {\n          headers: {\n            \"Content-Type\": \"text/event-stream\",\n            \"Cache-Control\": \"no-cache\",\n            \"Connection\": \"keep-alive\"\n          }\n        });\n      } else {\n        const openaiData = await openaiResponse.json();\n        const anthropicResponse = formatOpenAIToAnthropic(openaiData, openaiRequest.model);\n        return new Response(JSON.stringify(anthropicResponse), {\n          headers: { \"Content-Type\": \"application/json\" }\n        });\n      }\n    }\n    return new Response(\"Not Found\", { status: 404 });\n  }\n};\nexport { index_default as default };\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/home/runner/work/claudecode-via-openrouter/claudecode-via-openrouter/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/runner/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/runner/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/home/runner/work/claudecode-via-openrouter/claudecode-via-openrouter/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/home/runner/work/claudecode-via-openrouter/claudecode-via-openrouter/.wrangler/tmp/bundle-Y6jVgK/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/home/runner/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/home/runner/work/claudecode-via-openrouter/claudecode-via-openrouter/.wrangler/tmp/bundle-Y6jVgK/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/home/runner/work/claudecode-via-openrouter/claudecode-via-openrouter/.wrangler/tmp/bundle-Y6jVgK/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["__defProp", "__name"]
}
